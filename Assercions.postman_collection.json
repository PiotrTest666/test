{
	"info": {
		"_postman_id": "a4831878-a92d-4a1d-8eef-e56e2934386a",
		"name": "Assercions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"My test1\", function () {\r",
							"    let a={\r",
							"        \"name\": \"Peter\"\r",
							"    };\r",
							"   let b={\r",
							"       \"name\":\"Peter\"\r",
							"    };\r",
							"\r",
							"    pm.expect(a).to.not.eql(b, '1');\r",
							"    pm.expect(a).to.equal(b, '2'); //czy to ten sam obiekt? NIE\r",
							"    pm.expect(a).to.eql(a, '3');\r",
							"});\r",
							"\r",
							"pm.test(\"My test2\", function () {\r",
							"    pm.expect(true).to.be.true;\r",
							"    pm.expect(null).to.be.null;\r",
							"    pm.expect(undefined).to.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"My test3\", function () {\r",
							"    pm.expect([1,2,3]).to.include(2);\r",
							"    pm.expect(2).to.be.oneOf([0,1,2]);\r",
							"    pm.expect('Piotr Roz').to.match(/^Pio/); //RegEx\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://example.com/",
					"protocol": "http",
					"host": [
						"example",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let commentsStatus = jsonData.prefs.comments.status;\r",
							"pm.test(\"comments should be disabled\", function(){\r",
							"    pm.expect(commentsStatus).to.eql(\"disabled\");\r",
							"});\r",
							"\r",
							"let boardStatus = jsonData.limits['54bba24af6196bd5f824e563'].boards.totalPerMember.status;\r",
							"pm.test(\"board status should be OK 1\", function(){\r",
							"    pm.expect(boardStatus).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"let boardStatus1;\r",
							"for(let key in jsonData.limits){\r",
							"    // console.log(key, jsonData.limits[key]);\r",
							"    if(jsonData.limits[key].hasOwnProperty('boards')){\r",
							"        boardStatus1 = jsonData.limits[key].boards.totalPerMember.status;\r",
							"    }\r",
							"};\r",
							"pm.test(\"board status should be OK 2\", function(){\r",
							"    pm.expect(boardStatus1).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"console.log(pm.response.headers.get('Sozu-Id'));\r",
							"pm.test(\"headers is ok\", function(){\r",
							"    pm.expect(pm.response.headers.get('Sozu-Id')).to.eql('HIT');\r",
							"});\r",
							"\r",
							"pm.test(\"cookie has sessionId\", function(){\r",
							"pm.expect(pm.cookies.has('sessionId')).to.be.true;});\r",
							"\r",
							"pm.test(\"cookie sessionId has proper value\", function(){\r",
							"pm.expect(pm.cookies.get('sessionId')).to.eql('ad3se3ss8sg7sg3');});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5ab34d8c2f00006600ca3652"
					]
				}
			},
			"response": []
		}
	]
}